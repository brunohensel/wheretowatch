
CREATE TABLE IF NOT EXISTS  movieEntity(
id INTEGER AS kotlin.Int PRIMARY KEY NOT NULL,
title TEXT NOT NULL,
overview TEXT NOT NULL,
popularity REAL AS kotlin.Float NOT NULL,
genres TEXT AS kotlin.collections.List<kotlin.Int> NOT NULL,
originalTitle TEXT NOT NULL,
voteCount INTEGER AS kotlin.Int NOT NULL,
voteAverage REAL AS kotlin.Float NOT NULL,
releaseDate TEXT AS kotlinx.datetime.LocalDate,
posterPath TEXT,
backdropPath TEXT,
collectionId INTEGER AS kotlin.Int,
streamProviders TEXT AS kotlin.collections.List<kotlin.Int>
);

insertMovie:
INSERT OR REPLACE INTO movieEntity(
id,
title,
overview,
popularity,
genres,
originalTitle,
voteCount,
voteAverage,
releaseDate,
posterPath,
backdropPath,
collectionId,
streamProviders
) VALUES (
?,
?,
?,
?,
?,
?,
?,
?,
?,
?,
?,
?,
?
);
getMovie:
SELECT * FROM movieEntity
WHERE movieEntity.id = :movieId
;

getMovies:
SELECT * FROM movieEntity
ORDER BY movieEntity.popularity DESC
LIMIT :limitedBy
;

getMoviesByGenre:
SELECT * FROM movieEntity
INNER JOIN movieAndGenre ON movieId = movieEntity.id
WHERE movieAndGenre.genreId = :genreId
;

getMovieCollection:
SELECT * FROM movieEntity
WHERE collectionId = :collectionId
ORDER BY movieEntity.releaseDate ASC
;

getMovieByProvider:
SELECT * FROM movieEntity
INNER JOIN movieAndProvider ON movieId = movieEntity.id
WHERE movieAndProvider.providerId IN :providerIds
ORDER BY movieEntity.popularity DESC
;

updateMovie:
UPDATE movieEntity SET
id = :id,
title = :title,
overview = :overview,
popularity = :popularity,
genres = :genres,
originalTitle = :originalTitle,
voteCount = :voteCount,
voteAverage = :voteAverage,
releaseDate = :releaseData,
posterPath = :posterPath,
backdropPath = :backdropPath,
collectionId = :collectionId,
streamProviders = :providers
WHERE id = id;
